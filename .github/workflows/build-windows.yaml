name: Build Qt 5.15.16 WINDOWS

on:
  workflow_dispatch:  # Trigger manually from GitHub UI

jobs:
  
  build-windows:
    runs-on: windows-latest  # Windows 7 build using MinGW 64-bit
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install MinGW-w64 and dependencies
        run: |
          choco install wget
          choco install mingw --version 8.1.0
          choco install make
          choco install 7zip
          choco install python
          
      - name: Refresh environment variables
        run: |
          refreshenv
      
      - name: Cache Qt 5.15.16 source
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: qt-everywhere-opensource-src-5.15.16.tar.xz
          key: qt-5.15.16-source
          restore-keys: |
            qt-5.15.16-source

      # - name: Download Qt 5.15.16 source
      #   if: steps.cache-qt.outputs.cache-hit != 'true'
      #   run: |
      #     wget https://ftp.jaist.ac.jp/pub/qtproject/archive/qt/5.15/5.15.16/single/qt-everywhere-opensource-src-5.15.16.tar.xz
      #     echo "2a25d4e90abd05284bf5bb01365c9b44  qt-everywhere-opensource-src-5.15.16.tar.xz" > qt-everywhere-opensource-src-5.15.16.tar.xz.md5

      - name: Verify MD5 checksum
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          certutil -hashfile qt-everywhere-opensource-src-5.15.16.tar.xz MD5 | findstr /i "2a25d4e90abd05284bf5bb01365c9b44"
          if ($LASTEXITCODE -ne 0) { exit 1 }
      
      - name: Extract Qt source with 7-Zip
        run: |
          echo "Check dir structure before extract tar.xz"
          dir
          "C:\Program Files\Git\usr\bin\tar.exe" -xf qt-everywhere-opensource-src-5.15.16.tar.xz
          echo "Check dir structure before extract tar.xz"
          dir

      # - name: Extract Qt 5.15.16 source
      #   run: |
      #     tar -xvf qt-everywhere-opensource-src-5.15.16.tar.xz

      # - name: Cache OpenSSL
      #   uses: actions/cache@v3
      #   with:
      #     path: C:/openssl
      #     key: openssl-1.1.1l
      #     restore-keys: |
      #       openssl-1.1.1l

      # - name: Download OpenSSL source
      #   run: |
      #     echo "Check dir structure before dld openssl"
      #     dir
      #     wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz
      #     echo "Check dir structure after dld openssl"
      #     dir
      #     "C:\Program Files\Git\usr\bin\tar.exe" -xf openssl-1.1.1l.tar.gz
      #     echo "Check dir structure after extract openssl"
      #     dir

      # - name: Build static OpenSSL
      #   run: |
      #     cd openssl-1.1.1l
      #     perl Configure mingw64 no-shared --prefix=C:\openssl
      #     make
      #     make install
      #     cd ..

      - name: Configure and build Qt (Release)
        run: |
          echo "Check dir structure before configure"
          dir
          mkdir qt-build-rel
          cd qt-build-rel
          ..\qt-everywhere-src-5.15.16\configure.bat -prefix C:\Qt\5.15.16 -opensource -nomake examples -nomake tests -platform win32-g++ -release
          mingw32-make -j
          mingw32-make install
          cd ..
          echo "Check dir structure after configure"
          dir

      - name: Configure and build Qt (Debug)
        run: |
          mkdir qt-build-debug
          cd qt-build-debug
          ..\qt-everywhere-src-5.15.16\configure.bat -prefix C:\Qt\5.15.16 -opensource -nomake examples -nomake tests -platform win32-g++ -qtlibinfix d -debug
          mingw32-make -j
          mingw32-make install
          cd ..
          
      - name: Compress build artifact with high compression
        run: |
          7z a -t7z -mx=9 Qt_5.15.16_Build.7z C:\Qt\*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Qt-5.15.16-Build
          path: Qt_5.15.16_Build.7z
